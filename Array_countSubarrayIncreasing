/*
Given Array of numbers, integer K
Find No of consecutive subarrays of length K which has values which are strictly increasing
Arr : 1,2,3,3,4,5
K =3
Output: 2
Explanation: 1,2,3 | 3,4,5
*/

import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {
    /*
     * Complete the 'countHighlyProfitableMonths' function below.
     */

    public static int countHighlyProfitableMonths(List<Integer> stockPrices, int k) {
        System.out.println(stockPrices.toString());
        System.out.println(k);
        int ans =0, N = stockPrices.size();
        if(N==0 || k > N)
            return ans;
        else if(N==1 || k==1)
            return 1;
            
        int consecutiveCount = 0;
        
        for(int i=0; i<N-1;i++){
            if(stockPrices.get(i) < stockPrices.get(i+1)){
                consecutiveCount++;
                if(consecutiveCount >= k-1)
                    ans++;
            }else{
                consecutiveCount = 0;
            }
        }
        return ans;
    }
}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int stockPricesCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> stockPrices = IntStream.range(0, stockPricesCount).mapToObj(i -> {
            try {
                return bufferedReader.readLine().replaceAll("\\s+$", "");
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        })
            .map(String::trim)
            .map(Integer::parseInt)
            .collect(toList());

        int k = Integer.parseInt(bufferedReader.readLine().trim());

        int result = Result.countHighlyProfitableMonths(stockPrices, k);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
